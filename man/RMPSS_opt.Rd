% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RMPSH_opt.R
\name{RMPSS_opt}
\alias{RMPSS_opt}
\title{Recursive Modified Pattern Search on Simplex}
\usage{
RMPSS_opt(
  x0,
  func,
  s_init = 1,
  no_runs = 1000,
  max_iter = 10000,
  rho_1 = 2,
  rho_2 = 2,
  phi = 10^(-20),
  lambda = 10^(-10),
  tol_fun = 10^(-6),
  tol_fun_2 = 10^(-20),
  print_output = 0
)
}
\arguments{
\item{x0}{vector of initial guess provided by user, must be on unit simplex.}

\item{func}{the function to be optimized, should be provided by the user.}

\item{s_init}{initial  'global step size'. Default Value is 1. It must be set less than or equal to 1.}


\item{no_runs}{max number of 'runs'. Default Value is 1000.}

\item{max_iter}{max number of iterations in each 'run'. Default Value is 10000.}

\item{rho_1}{'step decay rate' for the first run only (default is 2).}

\item{rho_2}{'step decay rate' for second run onwards (default is 2).}

\item{phi}{lower bound of 'global step size'. Default value is \eqn{10^{-20}}.}


\item{lambda}{coordinates with value than it are considered insignificant. For sparse solution, its value should be set higher, for non-sparse solution, it should be be set at very small value. Default value is \eqn{10^{-10}}.}

\item{tol_fun}{termination tolerance on when to decrease the 'global step size'. Default Value is \eqn{10^{-6}}. For more accuracy, user may set it to smaller value
e.g., \eqn{10^{-20}}. However, for expensive objective functions, for faster computation, user should set it to a larger value e.g, \eqn{10^{-3}}.}

\item{tol_fun_2}{termination tolerance on the difference of norms of solution points in two consecutive runs. Default Value is \eqn{10^{-20}}.
However, for expensive objective functions, for faster computation, user should set it to a larger value e.g, \eqn{10^{-6}}.}


\item{print_output}{Binary Command to print optimized value of objective function after each interation, 0 = no print, 1 = print. Default is 0.}
}
\value{
the optimal solution point.
}
\description{
`RMPSS_opt` can be used to minimize any non-convex blackbox function where parameter
space belong to an unit simplex.
}
\examples{
g <- function(y)
return(-20 * exp(-0.2 * sqrt(0.5 * (y[1] ^ 2 + (y[2]-1) ^ 2)))
 - exp(0.5 * (cos(2 * pi * y[1]) + cos(2 * pi * (y[2]-1))))
 + exp(1) + 20)

# global min value is 0, achieved at c(0,1)
starting_point <- c(0.4,0.6)
g(starting_point)
solution <- RMPSS_opt(starting_point,g)
g(solution)

# Example of putting infeasible starting point
g <- function(y)
return(-y[1])   # min value is 1, achieved if first coordinate is 1
RMPSS_opt(c(1,0.2,56,0.4),g) # starting point NOT on simplex


# Example of 1000 dimensional problem
g <- function(y)
return(- sum(y^10))
# min value is -1, achieved if only one
# coordinate is equal to 1, rest are 0
RMPSS_opt(rep(1/1000,1000),g, print = 1)
}
